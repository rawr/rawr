#!/usr/bin/env ruby

require 'fileutils'
require 'rubygems'

require 'pp'
require 'user-choices'

require 'rawr/rawr_main'
require 'rawr/rawr_environment'
require 'rawr/rawr_version'
require 'rawr/creator'


def create_rakefile
  if File.exist? "Rakefile"
    if !rakefile_contains_rawr?
      handle_existing_rakefile
    else
      warn "Rakefile already contains Rawr tasks"
    end
  else
    create_new_rakefile
  end
end

def quit_and_do_nothing_with_rakefile 
  warn "Rawr will now exit, and leave your Rakefile as-is."
end

def prepend_to_current_rakefile
  warn "Rawr will now prepend new Rawr task content to your current Rakefile ..."
  current = IO.read( 'Rakefile')
  File.open("Rakefile", "w") do |rakefile|
    rakefile.puts "require 'rawr'\n"
    rakefile.puts current
  end
end

def replace_with_new_rakefile
  warn "Rawr will now replace your current Rakefile with a new one ..."
  create_new_rakefile
end

def create_new_rakefile
  warn "Creating Rakefile ..."
  File.open("Rakefile", "w") do |rakefile|
    rakefile.puts "require 'rawr'\n"
  end
end

def rakefile_contains_rawr?
  File.open("Rakefile", "r") do |rakefile|
    rakefile.each_line do |line|
      return true if line =~ /^ *require +['"]rawr['"]/
    end
  end
  return false
end

def handle_existing_rakefile
  options = { '1' => ['Keep the current Rakefile, and add the rawr content to the top.', :prepend_to_current_rakefile ],
              '2' => ['Replace the current Rakefile with a new Rakefile.  You will lose everything in the current Rakefile!', :replace_with_new_rakefile ],
              '3' => ['Quit, leave the current Rakefile alone, and add nothing new.', :quit_and_do_nothing_with_rakefile ] 

  }
  choice = ''
  puts "Rawr has found an exisiting Rakefile.\nPlease select one of these options:\n"
  puts "\t1: #{options['1'].first }" 
  puts "\t2: #{options['2'].first }"  
  puts "\t3: #{options['3'].first }"  

  while choice.to_s.strip !~ /[123]/
    print "\nYour choice (1, 2, or 3): "
    choice = STDIN.gets.to_s.strip[0..0]
  end
  send options[choice].last
end



class RawrChoices < UserChoices::Command
  include UserChoices 


  def add_sources builder
    # Order matters.  What comes first has higher precedence

    builder.add_source CommandLineSource, :usage,
                       "Usage:  rawr [options] install [project/path]\n" +
                       "Sets up rawr in the current directory, or in 'project/path' if one is given.\n#{@parser}"

    builder.add_source(EnvironmentSource, :with_prefix, "rawr_")
    builder.add_source(YamlConfigFileSource, :from_file, ".rawr") 

  end

  def add_choices builder
    default_java_class = 'org.monkeybars.rawr.Main'
    default_java_main_directory = 'src'
    default_build_configuration_file =  'build_configuration.rb'

    builder.add_choice(:wordy, :type=>:boolean , :default => false) { | command_line |
      command_line.uses_option "-w", "--wordy", 
                               "Wordy: See more info while rawr is executing." 
    }

    builder.add_choice( :class, :type=>:string, :default => default_java_class ) { | command_line |
      command_line.uses_option "-c", "--class FULL_CLASS_NAME", 
                               "Main Java class. Default is #{default_java_class}"
    }

    builder.add_choice(:directory, :type=>:string , :default => default_java_main_directory) { | command_line |
      command_line.uses_option "-d", "--directory DIRECTORY_NAME", 
                               "Directory to place Java main file in, defaults to '#{default_java_main_directory}' " 
    }

    builder.add_choice(:build_config_file, :type=>:string , :default => default_build_configuration_file ) { | command_line |
      command_line.uses_option "-f", "--file BUILD_CONFIGURATION_FILE", 
                              "Name of the Rawr configuration file, defaults to '#{default_build_configuration_file}'"
    }


    builder.add_choice(:local_jruby_jar, :type=>:string , :default => nil ) { | command_line |
      command_line.uses_option "-j", "--local-jruby-jar PATH_TO_LOCAL_JRUBY_JAR", 
                               "Complete path to a local copy of jruby-complete.jar. If not defined then the jar will be downloaded for jruby.org"
    }


    builder.add_choice(:no_config, :type=>:string, :default => 'false'  ) { | command_line |
      command_line.uses_option '-x', "--noconfig TRUE_OR_FALSE", "Do not generate a Rawr configuration file"
    }

    builder.add_choice(:show_version, :type=>:boolean, :default => 'false'  ) { | command_line |
      command_line.uses_option '-v', "--version", "Show the rawr version number"
    }

    builder.add_choice(:no_download, :type=>:string, :default => 'false'  ) { | command_line |
      command_line.uses_option '-n', "--nodownload TRUE_OR_FALSE", "Do not download the latest jruby-complete.jar into the project"
    }

    builder.add_choice(:no_jar, :type=>:string, :default => 'false'  ) { | command_line |
      command_line.uses_option '-z', "--nojar TRUE_OR_FALSE", "Do not automatically copy or download the latest jruby-complete.jar into the project"
    }

    #  This is what will grab the actual command passed to rawr and any additional arguments for that command.
    #  For example,    
    #    $ rawr install  foo/bar
    # gives us 
    #   :command => ['install',   'foo/bar'] 
    # in our options hash
    builder.add_choice(:command) { | command_line | command_line.uses_arglist } 
  end


  def execute
     warn "Running in #{Rawr::ruby_environment}"
    if Rawr::Main.valid_options?  @user_choices
      warn "Create rawr files using #{@user_choices.pretty_inspect}"
      Rawr::Main.project @user_choices
    else
      warn "\nThere were one or more problems with your parameters: \n\t#{Rawr::Main.errors.join("\n\t")}\n\nRun 'rawr -h' for a list of options."
    end
  end

end


S4tUtils.with_pleasant_exceptions do
  RawrChoices.new.execute
end

